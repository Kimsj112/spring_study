스프링 프레임워크의 주요 특징
1. POJO(Plain Old Java Object) 기반
순수 자바 객체를 사용하므로 기존 코드들을 재사용 가능하며,
테스트와 유지보수에 유리하다.

2. DI(Dependency Injection) : 의존성 주입 지원
스프링의 핵심 기능이며, 클래스들 간 의존성을 낮춰주고 코드 재사용성을 높인다.


- IoC(Inersion of Controll) : 제어권의 역전
객체의 입장에서 사용할 다른 객체를 직접 생성하여 제어한다.
이러한 것이 일반적인 제어 흐름이다.
제어권의 역전이란 이러한 흐름을 반대로 뒤집은 것으로 객체가 사용하는 다른 객체를 
직접 생성하지도 않으며, 자기 자신도 어디서 사용되는지 알 수 없다.
특별한 권한을 가진 다른 객체에 의해 결정되고 만들어진다.

- IoC 컨테이너(스프링 컨테이너)
스프링에서 객체를 생성, 관리, 의존성 주입을 담당하는 주요 컴포넌트
IoC컨테이너는 논리적인 구조이다.(개념)
즉, 실체가 아니며 IoC컨테이너라는 논리적인 구조를 바탕으로 스프링에서 사용하는 실제 구현 객체는
BeanFactory와 ApplicationContext 객체이다.
BeanFactory는 가장 기본적인 IoC컨테이너 기능을 제공하며,
ApplicationContext는 좀 더 업그레이드되어 추가 기능을 제공한다.


의존성 주입 정리
1. 스프링에서는 DI라는 것을 편하게 할 수 있게 지원해준다.
2. 스프링의 도움을 받아야하므로 스프링이 사용할 수 있게 등록해줘야한다.
  @Component : 스프링에 빈 등록할 때 사용하는 어노테이션
3. 등록을 마친 클래스들의 객체를 사용할 때 주입 받아 사용하면 되므로
  직접 new를 쓰지 않는다.
  @Autowired : 주입을 받을 때 사용하는 어노테이션

4. 등록을 하게되면 스프링 컨테이너에서 해당 클래스 객체를 만들고 주입하는 등의 관리를 해준다.
  컨테이너에 등록된 객체들을 Bean객체라고 한다.


주입의 종류
1. 필드 주입
	권장하지 않는다. (테스트 코드에서만 사용한다.)
	- 장점
	  편하다.
	- 단점
	  1) 생성자나 setter를 사용해서 주입을 받는것이 아니기 때문에
	     스프링의 도움 없이는 주입이 불가능하여 테스트에서 사용 불편
	  2) final 키워드 사용이 불가능하여 불변성을 보장받지 못한다.
	  3) 순환 참조 문제가 발생될 수 있다.

2. 생성자 주입
	가장 권장하는 방법
	- 생성자에 @Autowired를 사용하면 된다.
	- Spring 4.x.x 이상은 생성자가 한개만 있으면 자동으로 @Autowired가 붙는다.
	- 우리가 사용하는 SpringBoot 3.2.x.는 Spring 6.x.x버전을 기반으로
	  만들어졌으므로 생략이 가능하다.

	만약 필드를 초기화 할 때 setter가 없다고 가정해보자.
	그렇다면 반드시 생성자를 통해서 필드를 초기화 해야하므로
	객체를 하나 생성할 때 초기화한 값 이후에는 수정이 불가능해진다.
	그러므로 생성자 주입을 하게되면 주입된 객체의 불변성이 보장된다.

3. 수정자 주입(setter주입)
	주입을 상황에 따라 유연하게하기 위해 사용할 수는 있으나
	일반적으로 그런 상황은 거의 없다.
	그러므로 권장하지 않는다.

	- setter를 사용하여 주입하는 방법, setter에 @Autowired를 사용
	- 특정 필드에 setter를 사용하지 않아도 해당 클래스 객체를 만들 수 있어서
	  NPE가 발생될 수 있다.
	- setter를 만들면 언제든 수정이 가능하게 되므로 불변성이 보장되지 않는다.
	(객체의 주소가 변경될 가능성이 열려있다는 의미)





